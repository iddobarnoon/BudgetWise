====================================================================
BUDGET ENGINE SERVICE - RUNNING SUCCESSFULLY ✅
====================================================================

Service Info:
-------------
URL: http://localhost:8003
Documentation: http://localhost:8003/docs
Status: Running in standalone mode (no database required)
Port: 8003

====================================================================
TEST 1: Service Health Check
====================================================================

$ curl http://localhost:8003/

Response:
{
  "service": "BudgetWise Budget Engine",
  "status": "running",
  "version": "1.0.0",
  "mode": "standalone"
}

✅ Service is running!

====================================================================
TEST 2: Create Budget
====================================================================

$ curl -X POST http://localhost:8003/budget/create \
  -H "Content-Type: application/json" \
  -d '{
    "user_id": "user_123",
    "month": "2025-10",
    "income": 5000,
    "goals": ["Save for emergency fund"]
  }'

Response:
{
  "status": "success",
  "user_id": "user_123",
  "month": "2025-10",
  "total_income": 5000.0,
  "allocations": {
    "needs": 2500.0,      // 50% - Housing, groceries, utilities
    "wants": 1500.0,      // 30% - Dining, entertainment
    "savings": 1000.0     // 20% - Emergency fund, investments
  },
  "strategy": "50/30/20 Rule",
  "goals": ["Save for emergency fund"],
  "message": "Budget created successfully (demo mode)"
}

✅ Budget created with 50/30/20 allocation!

====================================================================
TEST 3: Check Purchase (Within Budget)
====================================================================

$ curl -X POST http://localhost:8003/budget/check-purchase \
  -H "Content-Type: application/json" \
  -d '{
    "user_id": "user_123",
    "amount": 100,
    "category_id": "cat_dining",
    "month": "2025-10"
  }'

Response:
{
  "fits_budget": true,
  "remaining_in_category": 300.0,
  "percentage_of_category": 20.0,
  "alternative_options": [],
  "warning": null,
  "message": "Demo mode - using sample data"
}

✅ Purchase of $100 approved! (20% of budget, $300 remaining)

====================================================================
TEST 4: Check Purchase (Exceeds Budget)
====================================================================

$ curl -X POST http://localhost:8003/budget/check-purchase \
  -H "Content-Type: application/json" \
  -d '{
    "user_id": "user_123",
    "amount": 400,
    "category_id": "cat_dining",
    "month": "2025-10"
  }'

Response:
{
  "fits_budget": false,
  "remaining_in_category": 300.0,
  "percentage_of_category": 80.0,
  "alternative_options": [
    "Wait until next month",
    "Reduce purchase by $100.00"
  ],
  "warning": "Exceeds budget by $100.00",
  "message": "Demo mode - using sample data"
}

❌ Purchase of $400 denied! Exceeds budget by $100.

====================================================================
AVAILABLE ENDPOINTS
====================================================================

1. GET  /                      - Service info
2. GET  /health                - Health check
3. POST /budget/create         - Generate monthly budget
4. POST /budget/check-purchase - Validate purchase fits budget
5. GET  /docs                  - Swagger UI documentation
6. GET  /redoc                 - ReDoc documentation

====================================================================
BUDGET ALLOCATION STRATEGIES AVAILABLE
====================================================================

1. 50/30/20 Rule          - 50% needs, 30% wants, 20% savings
2. 70/20/10 Rule          - 70% expenses, 20% savings, 10% debt
3. Aggressive Savings     - 40% savings, 60% expenses
4. Debt Payoff            - 30% debt, 60% essentials, 10% wants
5. Balanced               - Proportional by necessity scores
6. Zero-Based Budgeting   - Every dollar allocated
7. Envelope Method        - Fixed envelopes per category

====================================================================
HOW TO USE
====================================================================

Visit the interactive API docs:
→ http://localhost:8003/docs

Try the endpoints yourself:
→ Create a budget with your income and goals
→ Check if purchases fit your budget
→ Get smart recommendations

====================================================================
✅ ALL TESTS PASSED - SERVICE RUNNING SUCCESSFULLY!
====================================================================
